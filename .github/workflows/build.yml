name: Build Project

on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: github-build-${{ github.run_number }}
          release_name: Build ${{ github.run_number }}
          body: Build for run \#${{ github.run_number }}
      - name: Save output
        run: echo ${{ steps.release.outputs.upload_url }} > release.txt
      - name: Upload output
        uses: actions/upload-artifact@v4
        with:
            name: release
            path: release.txt
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download release url
        uses: actions/download-artifact@v4
        with:
          name: release
      - name: Get release url
        run: echo "RELEASE_URL=$(cat release.txt)" >> $GITHUB_ENV
      - name: Build
        run: cargo build --release
      - name: Upload Build
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_URL }}
          asset_path: target/release/${{ runner.os == 'Windows' && 'totp.exe' || 'totp' }}
          asset_name: totp-${{ runner.os == 'Windows' && 'windows.exe' || runner.os == 'macos' && 'macos' || 'linux' }}
          asset_content_type: application/octet-stream